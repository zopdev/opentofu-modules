mimir:
  config: |
    usage_stats:
      installation_mode: helm
    activity_tracker:
      filepath: /active-query-tracker/activity.log
    limits:
      ingestion_rate: ${limits_ingestion_rate}
      ingestion_burst_size: ${limits_ingestion_burst_size}
      max_fetched_chunks_per_query: ${limits_max_fetched_chunks_per_query}
      max_global_series_per_user: 500000
      max_cache_freshness: 12h
    memberlist:
      join_members:
      - dns+{{ include "mimir.fullname" . }}-gossip-ring.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.memberlistBindPort" . }}
    blocks_storage:
      backend: gcs
      gcs:
        bucket_name: "${data_bucket_name}"
      bucket_store:
        sync_dir: "/data"
        {{- if index .Values "chunks-cache" "enabled" }}
        chunks_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.chunksCacheAddress" . }}
            max_item_size: {{ mul (index .Values "chunks-cache").maxItemMemory 1024 1024 }}
            timeout: 750ms
            max_idle_connections: 150
        {{- end }}
        {{- if index .Values "index-cache" "enabled" }}
        index_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.indexCacheAddress" . }}
            max_item_size: {{ mul (index .Values "index-cache").maxItemMemory 1024 1024 }}
            timeout: 750ms
            max_idle_connections: 150
        {{- end }}
        {{- if index .Values "metadata-cache" "enabled" }}
        metadata_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.metadataCacheAddress" . }}
            max_item_size: {{ mul (index .Values "metadata-cache").maxItemMemory 1024 1024 }}
            max_idle_connections: 150
        {{- end }}
      tsdb:
        dir: "/data"
        head_compaction_interval: 15m
    compactor:
      data_dir: "/data"
      compaction_interval: 5m
      deletion_delay: 1h
    frontend:
      scheduler_address: mimir-query-scheduler.mimir.svc:9095
      split_queries_by_interval: 15m
    frontend_worker:
      scheduler_address: mimir-query-scheduler.mimir.svc:9095
    alertmanager:
      data_dir: /data
    query_scheduler:
      max_outstanding_requests_per_tenant: ${limits_max_outstanding_requests_per_tenant}
    ruler:
      rule_path: /data
      {{- if index .Values "metadata-cache" "enabled" }}
    ruler_storage:
      cache:
        backend: memcached
        memcached:
          addresses: {{ include "mimir.metadataCacheAddress" . }}
          max_item_size: {{ mul (index .Values "metadata-cache").maxItemMemory 1024 1024 }}
      {{- end }}
    runtime_config:
      file: /var/{{ include "mimir.name" . }}/runtime.yaml
    store_gateway:
      sharding_ring:
        kvstore:
          prefix: multi-zone/
          store: memberlist
        replication_factor: ${store_gateway_replication_factor}

chunks-cache:
  enabled:  {{ .Values.chunks_cache_enabled  }}
  replicas: {{ .Values.chunks_cache_replicas }}
  maxItemMemory: {{ .Values.chunks_cache_max_item_memory }}
  connectionLimit: {{ .Values.chunks_cache_connection_limit }}

index-cache:
  enabled:  {{ .Values.index_cache_enabled  }}
  replicas: {{ .Values.index_cache_replicas }}
  maxItemMemory: {{ .Values.index_cache_max_item_memory }}
  connectionLimit: {{ .Values.index_cache_connection_limit }}

metadata-cache:
  enabled:  {{ .Values.metadata_cache_enabled  }}
  replicas: {{ .Values.metadata_cache_replicas }}
  maxItemMemory: {{ .Values.metadata_cache_max_item_memory }}
  connectionLimit: {{ .Values.metadata_cache_connection_limit }}

nginx:
  enabled: false
minio:
  enabled: false

compactor:
  replicas: ${compactor_replicas}
  persistentVolume:
    enabled: ${compactor_persistence_volume_enable}
    size: ${compactor_persistence_volume_size}
  resources:
    requests:
      %{~ if  compactor_min_cpu != "null"  ~}
      cpu: ${compactor_min_cpu}
      %{~ endif ~}
      
      %{~ if  compactor_min_memory != "null"  ~}
      memory: ${compactor_min_memory}
      %{~ endif ~}

    limits:
      %{~ if  compactor_max_cpu != "null"  ~}
      cpu: ${compactor_max_cpu}
      %{~ endif ~}

      %{~ if  compactor_max_memory != "null"  ~}
      memory: ${compactor_max_memory}
      %{~ endif ~}

  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
        defaultMode: 0640
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"

ingester:
  replicas: ${ingester_replicas}
  lifecycler:
    ring:
      replication_factor: 2
  statefulSet:
    enabled: true
  zoneAwareReplication:
    enabled: false
  persistentVolume:
    size: ${ingester_persistence_volume_size}
  wal:
    enabled: true
    flush_on_shutdown: true
    flush_idle_period: 1m
    replay_memory_ceiling: 512MB
  resources:
    requests:
      %{~ if  ingester_min_cpu != "null"  ~}
      cpu: ${ingester_min_cpu}
      %{~ endif ~}

      %{~ if  ingester_min_memory != "null"  ~}
      memory: ${ingester_min_memory}
      %{~ endif ~}

    limits:
      %{~ if  ingester_max_cpu != "null"  ~}
      cpu: ${ingester_max_cpu}
      %{~ endif ~}

      %{~ if  ingester_max_memory != "null"  ~}
      memory: ${ingester_max_memory}
      %{~ endif ~}

  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"

querier:
  replicas: ${querier_replicas}
  concurrency: 8
  resources:
    requests:
      %{~ if  querier_min_cpu != "null"  ~}
      cpu: ${querier_min_cpu}
      %{~ endif ~}

      %{~ if  querier_min_memory != "null"  ~}
      memory: ${querier_min_memory}
      %{~ endif ~}

    limits:
      %{~ if  querier_max_cpu != "null"  ~}
      cpu: ${querier_max_cpu}
      %{~ endif ~}

      %{~ if  querier_max_memory != "null"  ~}
      memory: ${querier_max_memory}
      %{~ endif ~}
  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"

query_frontend:
  replicas: ${query_frontend_replicas}
  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"

store_gateway:
  zoneAwareReplication:
    enabled: false
  persistentVolume:
    size: ${store_gateway_persistence_volume_size}
  replicas: ${store_gateway_replicas}
  resources:
    requests:
      %{~ if  store_gateway_min_cpu != "null"  ~}
      cpu: ${store_gateway_min_cpu}
      %{~ endif ~}

      %{~ if  store_gateway_min_memory != "null"  ~}
      memory: ${store_gateway_min_memory}
      %{~ endif ~}
    limits:
      %{~ if  store_gateway_max_cpu != "null"  ~}
      cpu: ${store_gateway_max_cpu}
      %{~ endif ~}

      %{~ if  store_gateway_max_memory != "null"  ~}
      memory: ${store_gateway_max_memory}
      %{~ endif ~}

  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"

distributor:
  replicas: ${distributor_replicas}
  resources:
    requests:
      %{~ if  distributor_min_cpu != "null"  ~}
      cpu: ${distributor_min_cpu}
      %{~ endif ~}

      %{~ if  distributor_min_memory != "null"  ~}
      memory: ${distributor_min_memory}
      %{~ endif ~}

    limits:
      %{~ if  distributor_max_cpu != "null"  ~}
      cpu: ${distributor_max_cpu}
      %{~ endif ~}

      %{~ if  distributor_max_memory != "null"  ~}
      memory: ${distributor_max_memory}
      %{~ endif ~}
  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"

ruler:
  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"

alertmanager:
  enabled: true
  extraVolumes:
    - name: ${cluster_name}-mimir-google-credentials
      secret:
        secretName: ${cluster_name}-mimir-google-credentials
  extraVolumeMounts:
    - name: ${cluster_name}-mimir-google-credentials
      mountPath: /etc/mimir/google/
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/mimir/google/gcs.json"