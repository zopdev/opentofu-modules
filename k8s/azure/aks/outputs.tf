output "cluster_id" {
  description = "AKS cluster ID."
  value       = module.aks.aks_id
}

output "cluster_host" {
  sensitive   = true
  description = "Endpoint for AKS control plane."
  value       = module.aks.host
}

output "kubectl_config" {
  sensitive   = true
  description = "kubectl config as generated by the module."
  value       = data.azurerm_kubernetes_cluster.cluster.kube_admin_config
}

output "location" {
  description = "AZURE location"
  value       = var.app_region
}

output "cluster_name" {
  description = "Kubernetes Cluster Name"
  value       = module.aks.aks_name
}

output "k8s_version" {
  value = "1.29"
}

output "os" {
  value = "Ubuntu Linux"
}

output "node_configs" {
  value = {
    machine_type   = var.node_config.node_type
    min_node_count = tostring(var.node_config.min_count)
    max_node_count = tostring(var.node_config.max_count)
  }
}

output "k8s_ca" {
  value = data.azurerm_kubernetes_cluster.cluster.kube_admin_config.0.cluster_ca_certificate
  sensitive = true
}

output "custom_secrets_name_list" {
  value ={
  for k, v in var.custom_secrets_name_list :  k => {
  for  secret_key in v.secrets : "${secret_key}" =>
  "${local.cluster_name}-${k}-${secret_key}-secret" }
  }
}

output "aks_vm_scaleset" {
  value = data.azurerm_resources.aks_vmscaleset_resource.resources
}

output "selected_machine_type" {
  value = var.node_config.node_type
}

output "azurerm_key_vault_name" {
  value = "${local.cluster_name}-${random_string.key_vault_name.result}"
}

output "lbip" {
  value = azurerm_public_ip.app_public_ip.ip_address
}

output "grafana_password" {
  sensitive = true
  value = try(random_password.observability_admin[0].result,"")
}

output "grafana_admin" {
  value = local.grafana_enable ? "grafana-admin" : ""
}

output "grafana_host" {
  value = try(local.grafana_host,"")
}

output "grafana_datasources" {
  value = local.grafana_datasource_list
  sensitive = true
}

output "mimir_host_url" {
  value = try(module.observability[0].mimir_host_url,"")
}

output "loki_host_url" {
  value = try(module.observability[0].loki_host_url,"")
}

output "cluster_uid" {
  value = random_uuid.grafana_standard_datasource_header_value.result
}

output "tempo_host_url" {
  value =try( module.observability[0].tempo_host_url,"")
}

output "cortex_host_url" {
  value = try(module.observability[0].cortex_host_url,"")
}

output "admin_credentials" {
  value = { for key, pwd in random_password.admin_passwords : key => {
    email    = key
    password = pwd.result
  }}
  sensitive = true
}

output "editor_credentials" {
  value = { for key, pwd in random_password.editor_passwords : key => {
    email    = key
    password = pwd.result
  }}
  sensitive = true
}

output "viewer_credentials" {
  value = { for key, pwd in random_password.viewer_passwords : key => {
    email    = key
    password = pwd.result
  }}
  sensitive = true
}